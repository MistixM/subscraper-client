import asyncio
import concurrent.futures

from aiogram import Bot,Dispatcher,types,Router

from aiogram.filters import Command
from aiogram.filters import Command, StateFilter

from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.types import FSInputFile

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup

from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode

from instagrapi import Client

import csv

from random import choice

class FSMForm(StatesGroup):
    process_info = State() # Log in process
    parse_by_user = State() # Target username process
    parsing = State() # Parsing process
    second_parsing = State() # Second parsing process

class UserData:
    def __init__(self, user_id, username=None, password=None):
        self.user_id = user_id
        self.username = username
        self.password = password
        self.cl = None
        self.parsing = False
        self.count = 0
        self.captcha = False
        self.mode = "following"
        self.has_logged = False

user_data_list = {}

TOKEN = "7004836648:AAHMF-3fhThZFGN0drrTkrIGM7imfxJBiig"
PROXIES = [
    "http://185.33.85.84:50100"
]

dp = Dispatcher()
router = Router()

dp.include_router(router)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

start_button_text = "–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ ‚úÖ"
settings_button_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚öôÔ∏è"

@router.message(Command(commands=['start']), StateFilter(default_state))
async def start_message(msg: types.Message):
    user_id = msg.chat.id
    if user_id not in user_data_list:
        user_data_list[user_id] = UserData(user_id)
    
    item = KeyboardButton(text=start_button_text)
    item1 = KeyboardButton(text=settings_button_text)

    greet_kb = ReplyKeyboardMarkup(keyboard=[[item,item1]], resize_keyboard=True)

    bot_info = await bot.get_me()

    await bot.send_message(msg.chat.id, 
                           f"–ü—Ä–∏–≤–µ—Ç, <b>{msg.from_user.full_name}</b>!üëã\n–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>{bot_info.full_name}</b>. –Ø –ø–æ–º–æ–≥–∞—é –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞ üîç \n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü—É—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëÄ\n\n–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help",
                           reply_markup=greet_kb)

@router.message(Command(commands=['change_account']), StateFilter(default_state))
async def change_account(msg: types.Message, state: FSMContext):
    sent_msg = await msg.reply("–•–æ—Ä–æ—à–æ! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –º–Ω–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∏–∫–Ω–µ–π–º,–ø–∞—Ä–æ–ª—å")
    await state.set_state(FSMForm.process_info)

@router.message(Command(commands=['stop']))
async def stop_parsing(msg: types.Message):
    user_data = user_data_list[msg.chat.id]

    if user_data.parsing:
        await msg.reply(f"‚ö°–ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–∞–Ω–Ω—ã–µ –≤–æ—Ç-–≤–æ—Ç –ø—Ä–∏–¥—É—Ç üèÉ‚Äç‚ôÇÔ∏è")
        user_data.parsing = False
    else:
        await msg.reply(f"üëÄ–ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!")

@router.message(Command(commands=['stats']))  
async def get_stat(msg: types.Message):
    user_data = user_data_list[msg.chat.id]

    await msg.reply(f'<b>–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞: {user_data.parsing}</b>\n<b>–ö–∞–ø—á–∞: {user_data.captcha}</b>\n<b>–ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {user_data.count}</b>\n<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {user_data.mode}</b>\n–ò—Å–ø–æ–ª—å–∑—É–π /stop, —á—Ç–æ–±—ã <b>–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å</b> –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö.') 

@router.message(Command(commands=['help']))
async def help_docs(msg: types.Message):
    bot_info = await bot.get_me()
    await msg.reply(f"<b>{bot_info.full_name}</b> - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–∞. –í –µ–≥–æ –∑–∞–¥–∞—á—É –≤—Ö–æ–¥–∏—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ CSV —Ñ–∞–π–ª:\n- <code>Username</code>: —é–∑–µ—Ä–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞\n- <code>Bio</code>: –±–∏–æ–≥—Ä–∞—Ñ–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n- <code>Followers count</code>: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É –∞–∫–∫–∞—É–Ω—Ç–∞\n- <code>Following count</code>: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ —É –∞–∫–∫–∞—É–Ω—Ç–∞\n- <code>Full name</code>: –ø–æ–ª–Ω–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞\n\n–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ—Ç:\n/change_account - —Å–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n/stop - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞\n/stats - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞\n/help - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ\n\n")

@dp.message(StateFilter(FSMForm.process_info))
async def process_info(msg: types.Message, state: FSMContext):
    user_data = user_data_list[msg.chat.id]
    info = msg.text

    if info == settings_button_text:
        await msg.reply(f"–¢—ã –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º: <b>{user_data.username}</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</b>\n\n–ù–∏–∫–Ω–µ–π–º: <code>{user_data.username}</code>\n–ü–∞—Ä–æ–ª—å: <code>{user_data.password}</code>\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{user_data.mode}</b>\n\n/change_account - —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n")
        await state.set_state(default_state)

    else:
        try:
            username,password = info.split(',')
            username = username.strip()
            password = password.strip()

            await msg.reply('–ó–∞–≥—Ä—É–∂–∞–µ–º... –ü–µ—Ä–µ–π–¥–∏ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç (–∑–∞–ø—Ä–æ—Å –ø–æ—è–≤–∏—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö)')

            process_user_data(msg.chat.id, username, password)

            if login_user(msg.chat.id):
                user_data.has_logged = True
                
                await msg.reply(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç!‚úÖ\n–ù–∏–∫–Ω–µ–π–º: <code>{user_data.username}</code>\n–ü–∞—Ä–æ–ª—å: <code>{user_data.password}</code>\n\n–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚öôÔ∏è")
                await state.set_state(default_state)

                btn = InlineKeyboardButton(text='–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫', callback_data='following')
                btn1 = InlineKeyboardButton(text='–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data='followers')
                
                kb = InlineKeyboardMarkup(inline_keyboard=[[btn, btn1]])
                await msg.reply('–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚¨áÔ∏è', reply_markup=kb)
            else:
                await msg.reply(f"‚ùå–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º <b>{username}</b>. –ü—Ä–æ–≤–µ—Ä—å –∏–º—è —Å –ø–∞—Ä–æ–ª–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üîÑÔ∏è\n\nüéØ–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è:\n - –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞–ø—á—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç (–ø—Ä–æ–≤–µ—Ä—å instagram.com –∏ –Ω–∞–∂–º–∏ –Ω–∞ –≥–∞–ª–æ—á–∫—É, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∫–∞–ø—á–∞)\n - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Instagram \n - –ü–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. \n - –¢–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π")
                user_data.username = None
                user_data.password = None
                user_data.has_logged = False
        except ValueError as e:
            await msg.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∏–∫–Ω–µ–π–º,–ø–∞—Ä–æ–ª—å (–∫–æ–º–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)")
            await state.set_state(FSMForm.process_info)


@dp.message(StateFilter(FSMForm.parse_by_user))
async def parse_by_user(msg: types.Message, state: FSMContext):
    user_data = user_data_list[msg.chat.id]
    info = msg.text

    if info == settings_button_text:
        await msg.reply(f"–¢—ã –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º: <b>{user_data.username}</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</b>\n\n–ù–∏–∫–Ω–µ–π–º: <code>{user_data.username}</code>\n–ü–∞—Ä–æ–ª—å: <code>{user_data.password}</code>\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{user_data.mode}</b>\n\n/change_account - —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n")
    elif info == start_button_text or '/' in info:
        await msg.reply(f"<b>‚ùå–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>")
        await state.set_state(FSMForm.parse_by_user)
    else:
        await msg.reply(f"–•–æ—Ä–æ—à–æ! –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è..\n\n<b>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö..</b>\n\n<b>–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø–æ–ª—å–∑—É–π: /stop</b>\n–ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞")
        await state.set_state(default_state)

        with concurrent.futures.ThreadPoolExecutor() as executor:
            try:
                user_data.parsing=True
                user_data.count = 0

                result = asyncio.get_event_loop().run_in_executor(executor, get_all_info, info, msg.chat.id, msg)
                await result

                if result:
                    file = FSInputFile('data.csv')
                    await bot.send_document(msg.chat.id, file, caption='–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! ‚úÖ')
                user_data.parsing = False

            except KeyboardInterrupt:
                executor.shutdown(wait=False)
                print("Stopped by user..")

# When start button clicked
@dp.message(lambda msg: msg.text == start_button_text, StateFilter(default_state))
async def start_button_clicked(msg: types.Message, state: FSMContext):
    user_id = msg.chat.id
    if user_id not in user_data_list:
        user_data_list[user_id] = UserData(user_id)
    
    user_data = user_data_list[user_id]
    
    if not user_data.has_logged and not user_data.parsing:
        await msg.reply("–•–æ—Ä–æ—à–æ! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –º–Ω–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∏–∫–Ω–µ–π–º,–ø–∞—Ä–æ–ª—å (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö <b>(–≤–Ω–∏–º–∞–Ω–∏–µ, –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)</b>‚ùó")
        await state.set_state(FSMForm.process_info)
    elif user_data.has_logged and not user_data.parsing:
        btn = InlineKeyboardButton(text='–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫', callback_data='following')
        btn1 = InlineKeyboardButton(text='–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data='followers')
        
        kb = InlineKeyboardMarkup(inline_keyboard=[[btn, btn1]])
        await msg.reply('–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚¨áÔ∏è', reply_markup=kb)

    else:
        await msg.reply(f"–ü–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö! \n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π /stop, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å</b>")

# When settings button clicked
@dp.message(lambda msg: msg.text == settings_button_text)
async def settings_button_clicked(msg: types.Message):
    user_id = msg.chat.id
    if user_id not in user_data_list:
        user_data_list[user_id] = UserData(user_id)
    
    user_data = user_data_list[msg.chat.id]

    await msg.reply(f"–¢—ã –≤–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º: <b>{user_data.username}</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</b>\n\n–ù–∏–∫–Ω–µ–π–º: <code>{user_data.username}</code>\n–ü–∞—Ä–æ–ª—å: <code>{user_data.password}</code>\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: <b>{user_data.mode}</b>\n\n/change_account - —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n")


@dp.callback_query(lambda d: d.data, StateFilter(default_state))
async def parsing_following(callback: CallbackQuery, state: FSMContext):
    user_data = user_data_list[callback.message.chat.id]

    if callback.data == "following":
        user_data.mode = "following"
    else:
        user_data.mode = "followers"

    await callback.message.reply(f"–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–ø–∞—Ä—Å–∏—Ç—å üëÅÔ∏è")
    await state.set_state(FSMForm.parse_by_user)
# Function for processing user data
def process_user_data(user_id, username, password):
    global user_data_list

    if user_id not in user_data_list:
        user_data_list[user_id] = UserData(username, password)
    else:
        user_data = user_data_list[user_id]
        user_data.username = username
        user_data.password = password

# Instagrapi login function
def login_user(user_id):
    user_data = user_data_list[user_id]
    user_data.cl = Client(delay_range=[9,10])
    
    before_ip = user_data.cl._send_public_request("https://api.ipify.org/")
    with open('proxies.txt', 'r') as file:
        print("opening txt file")
        lines = file.readlines()
        user_data.cl.set_proxy(choice(lines).strip())

    after_ip = user_data.cl._send_public_request("https://api.ipify.org/")

    print(f'Before: {before_ip}')
    print(f'After: {after_ip}')

    try:
        user_data.cl.login(user_data.username, user_data.password)
        return True
    except Exception as e:
        print(e)
        user_data.cl = Client(delay_range=[9,10])
        return False
    
# Parsing process
def get_all_info(username, id, msg):

    print("Parsing has been started!")
    user_data = user_data_list[id]

    # Get ID from specified user
    try:

        target_id = user_data.cl.user_info_by_username_v1(username).model_dump()
    except Exception as e:
        print(f"Issue when trying to get target user information: {e}")
        msg.reply('‚ùó–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫–∞–ø—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –Ω–∞ instagram.com')
        user_data.parsing = False
        
        return False
    
    # Get followers ID's and append into the usernames export_data
    if user_data.mode == "followers":
        followers_id = user_data.cl.user_followers_v1(target_id['pk'])
    else:
        followers_id = user_data.cl.user_following_v1(target_id['pk'])

    with open('data.csv', 'w', encoding='utf-8', newline='') as file:
        data = csv.writer(file, delimiter=',', lineterminator='\n')
        data.writerow(['username', 'bio', 'followers_count', 'following_count', 'full_name'])

        try:
            for follower in followers_id:
                if user_data.parsing:
                    try:
                        full_info = user_data.cl.user_info_by_username_v1(follower.username)
                    except Exception as e:
                        print(f"Captcha: {e}")
                        msg.reply("‚ùó<b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n- –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\n- –ö–∞–ø—á–∞. –ü—Ä–æ–≤–µ—Ä—å instagram.com</b>\n\n–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å /stats")
                        user_data.captcha = True
                        pass

                    user_data.captcha = False

                    info_username = full_info.username.strip()
                    bio = full_info.biography.strip()
                    follower_count = full_info.follower_count
                    following_count = full_info.following_count
                    full_name = full_info.full_name.strip()

                    data.writerow(['https://instagram.com/' + info_username, bio.replace('\n', ''), follower_count, following_count, full_name])

                    user_data.count += 1
                    print(f'\rScraped: {user_data.count}', end='', flush=True)
                else:
                    return True

        except Exception as e:
            print(f"Probably Captcha: {e}")
            user_data.captcha = True
            msg.reply("‚ùó<b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n- –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\n- –ö–∞–ø—á–∞. –ü—Ä–æ–≤–µ—Ä—å instagram.com</b>\n\n–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å /stats")
            pass
    print("Parser has stop his work!")
    return True


async def main():
    print("Bot started")
    await dp.start_polling(bot)
    print("Bot stopped")


if __name__ == "__main__":
    asyncio.run(main())
